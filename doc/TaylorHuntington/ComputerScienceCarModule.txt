/*

Taylor Huntington
September 6th, 2016
Machine Learning
"Start Your Project"

I have two project ideas, please read through both and let me know which you believe would be a better project.

Idea #1 - Learning the best way to set my "map" in my Computer Science Capstone

(1) Title
Learning "Rest" Positions for Taxis on a grid view.

(2) Describe
In my Computer Science Capstone I am answering a fundamental problem about efficiency.

The basis of my Computer Science project is a 100 x 100 grid (10,000 unique points).
Each "day" of my experiment a set number of "requests" will be available for a set number of "movers".
Each "request" will ask for a mover to come to the point where the request was generated and move them somewhere else on the board.

For example instance 1 could occur at 86 x 22. This "instance" wants to be moved to 64 x 17.
The nearest "driver" located at 78 x 34 spends approx 14.4 "distance units" [sqrt((-8)^2 + (12)^2)] to move to the instance.
Once at 86 x 22 the "driver" will "pick up" the instance and move toward 64 x 17 spending 22.56 "distance units" in the process.
The 22.56 distance units are spent "optimally" versus wasteful time spent driving to or away from customers.

Moving diagnally is also possible meaning moving 3 right and 4 up in one move will result in 5 distance units. (example moving from 50 x 50 to 53 x 54)

Primary Goal: Find the relation between the number of events and drivers as a function in regards to effecient uptime.
"Driver" value is defined as (unit cost while driving instances / total unit cost for the time period)
A car that spends 300 of it's 500 hours driving customers is more "valuable" and "effecient" than one that only has 500 of it's 1000 hours driving customers.
Example: 1000 instances, Sample 50 drivers, 100 drivers, 150 drivers, and see how effeciency and wait time change.
Example 2: Once results of 1000 instances are established, consider 100 instances, 10,000 instances.

Secondary Goals:
(A) Instances should wait as little as possible before being "picked up" by a driver.
When an instance spawns, it will wait until a driver picks it up. Once picked up, the instance is no longer losing value.

(B) Recognize driver spawn patterns that optimally distribute various instance spawn packages and locations.
Example: What happens if the 10 drivers are spawned in a line across the middle versus spread throughout the 10,000 possible points?

My goal for this project's machine learning part is to find the optimal spacing of driver spawns for this problem.

(3) Why Important / Interesting

The idea behind my simulation is an automated uber/taxi style business. Self Driving cars present several algorithmic problems including
(A) Where do we store / park / wait the car until a new "job" is available?

(B) If 10 cars are used to service an area, what is the variance in car use? (What is the difference in distance traveled for the cars?)

(C) If 100 cars service 1000 industries at such a rate and effeciency, how are those numbers comparable to 10,000 instances being serviced by 1000 cars?
Systems of scale question

I believe the future of Business and Computer Science is increasingly one where we rely on machines. 
If we can create a situation that maintains itself and generates revenue, we have ourselves a good investment opportunity.

(4) Input Space

There are a multitude of variables that can change how this experiment runs including

The main simulation world will have the following variables

int hours : Number of hours the simulation runs

int movesperhour : This is a number we can use to adjust the "speed" of the roadways.
With 10,000 points, a "movesperhour" of 150 would allow us to get from any point on the grid within the hour. 
he largest move from 0,0 to 100, 100 would cost about 141.42 "distance units" 
A movesperhour value of 20 would cause the same trip to take just over seven hours.

int instances - Number of "instances" that will occur per period.

int drivers - number of "cars" that can service instance requests.

Each driver will have two "movecost variables" and a double that represents how effecient the car is being.
int totalmoves : total number of "distance units" traveled during the simulation
int paidmoves : total number of "distance units" traveled while an instance is being serviced
double eff : paidmoves/totalmoves = tells us how much of the distance driven is "around" instances.

int movecost = A variable we can use to simulate that traveling distance is more or less costly. The higher gas prices of 2007 would increase car movecosts.

int goodhours = hours spent driving other people
int totalhours = total hours spend moving

(5) Output Space

I am intending that when the simulation is done, we can check the various instances that the drivers have serviced throughout the day.

I am interested most in the following data and how it varies across simulations;
Average car "effeciency" as we change the number of jobs and drivers.
Average wait time as we increase the number of drivers
Constrant driven simulations 

(6) Data Available for Learning Task
At the end of simulations I can record any significant data or save the entire instance for review later. 
From this data I intend on calculating things such as "average spawn" position and how that relates to available cars.
I am curious if cars should move after they complete driving the instance to the destination.

(7) Learning Paradigm - Supervised/UnSupervised
This will primarily be a supervised learning algorithm. Because the learning algorithm is required to get such detailed information from various simulations,
I feel it is neccessary to ensure it is taking the data in correctly.

(**) Useful Function Ideas

*Daughter of a family has soccer practice at 4:30pm and gets home from school at 3:00pm. Both parents are working until 5:00pm. This is a situation all too common across households as the number of double working parents increases. Ideally, we could create a world where we could schedule a driverless car to pick up and deliver a person to a location. The car could even be equipped with GPS/Webcam that would bring peace of mind to the parents.
Command to pick up and transfer child to soccer practice when parent has to work late.

*Grandma/Grandpa is too old to drive and is still driving. It's an uncomfortable situation all around. Because many seniors want to maintain their indepdence and do not want to depend on others for simple tasks like driving to the grocery store. We could create a system where a senior living independently can set up an "appointment" perhaps on Thursday at 4:30pm where a driverless car will pick up and deliver the senior to their preferred grocery store. The senior can maintain their independence while keeping the road safe and the family without worries.
Command to pick up Elderly person from a home and deliver to grocery store.

*We are already beginning to see "iPad McDonalds" pop up around the world. The dream would be we would be able to have a driverless car interact with a workerless restaraunt to deliver food on a scheduling system. People would be able to get food from any restaraunt that would be okay with their food being taxi'd to peoples home. In addition this benefits "slower" restaraunts because the cars would be able to able to pick up multiple orders at once and only arrive once the food was ready to be shipped.
Command to pick up food and deliver on a scheduler

(***) Simulating Terrian
Because the map is highly variable, we could classify nodes as "dark" and be unable to move there. By taking away portions of the 100 x 100 grid, we could simulate rivers mountains and various other map featuers.

*/

/**
Idea #2 

(1) Title
Pokemon Spawn Predictor

(2) Describe
Pokemon Go is a game recently released by Niantic, a subsidary of Google.

Available on iPhone and Android, Pokemon Go is a location based Pokemon catching and battling game. The game has already grossed over 440 million dollars.

Tulane University happens to be a hot spot for pokestops and gyms. Unfortunately our quality spawns are neither plentiful nor easily predictable.

Using the application, PokeAlert, I am able to scan a 600 meter radius circle for pokemon, in real time. 

The application works by spawning accounts that I have made and processed through the game introduction. The application will spawn these accounts in the scan circle until they have scanned the entire circle. I can also leave this application running in the background and see what pokemon have spawned and where overnight.

I would collect data for high value spawn pokemon including their spawn time and location. Once I have recorded enough information I should be able to predict the spawn pattern that the game uses. If my predictions are right, I can check by scanning during the time or being there in real time.

I believe that I could write a program in Java that utilizes their list or array functions to record a "pokemon" class with their own variables including integer pokedex number, integer stats, string names, and record their locations. Once these lists are combiled we can begin to see similarities across the data points and predict future spawns.

(3) Why Important/Interesting 

A lot of people, including myself play Pokemon Go on campus all the time. I have proudly walked over 300 kilometers since June 11th while having the application open. The constant shuffle of Pokemon Go gyms at the ROTC Cannon, Tulane Sign, Across from the library, and The Mushroom constantly remind us of other people playing the game.

By predicting spawn algorithms we can begin to understand how and when we should go hunting for Pokemon. I started using the scanner to locate Growlithes. 50 "Growlithe Candies" are required to evolve Growlithe to Arcanine. 3 "Growlithe Candies" are gained for wild every Growlithe caught. Players can also gain Growlithe candies by hatching Growlithes, transferring(deleting) Growlithes, and eventually by "walking" Growlithes. 

I would enjoy being able to share my predictions and results with the Pokemon Go players of Tulane.

(4) Input Space
I believe the best way to track spawns would be through an excel spreadsheet. I can have a catagory for every variable I will carry for the pokemon spawns. The notable ones I believe are name, number, location, time.

(5) Output Space
Ideally with enough data we will begin to see patterns in spawns. Once we see patterns we can assume certain pokemon will spawn at certain places at certain times. I honestly have no idae what the spawning algorithm is for this game, but I feel like it would be very useful to know.

(6) Data available for learning task

EXAMPLE DATA:
http://i.imgur.com/q1bKHFW.jpg
This image is an example scan of 600 meters around the Computer Science building. I have removed all non-valuable pokemon icons such as Pidgeys, Weedles, Spearows, etc.

In this image, we can note the following spawns:
Koffing@The Boot
Eevee between JL & Art Building
Koffing@McAlister
Growlithe/Eevee Behind Wall Dorm
Eevee near Loyola Quad
4 Squirtle Spawns@Audubon Park
(Note, Audubon Park is a knowk Squirtle "Nest". Nests are special types of spawns in Pokemon Go where a location has lots of a certain Pokemon spawning. City Park is a magnemite nest and Lee Armstrong Park is an Exeggucute nest.)

In addition, because each pokemon spawn lasts exactly 15 minutes. Because of this I am able to calculate every Pokemon's spawn time, to the minute.

By writing down this information and grouping "types" of spawns together, we will begin to see patterns in spawn locations in times. Eventually we can construct a map of spawns around the area.


(7) Learning paradigm  - supervised/unsupervised

This would be a supervised learning paradigm. Since the data is not directly transferable into the program, we will see observations in patterns and similarities as the data is surveyed. I believe with enough data, we will be able to make timely, accurate, useful predictions.

